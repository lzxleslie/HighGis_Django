#! /usr/bin/env node

var spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    fs = require('fs'),
    path = require('path'),
    chalk = require('chalk'),
    inquirer = require('inquirer'),
    Spinner = require('cli-spinner').Spinner,
    package = require('../package.json'),
    isWin = /^win/.test(process.platform),
    args = process.argv;

// Helper functions
/**
 * Executes the PS1 script upgrading npm
 * @param  {string}   version     - The version to be installed (npm install npm@{version})
 * @param  {string}   nodePath    - Path to Node installation (optional)
 * @param  {Function} cb          - Callback
 * @return {stderr[], stdout[]}   - stderr and stdout received from the PS1 process
 */
function runPowershell(version, nodePath, cb) {
    var scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1'),
        specialArgs = nodePath === null ?
            '& {& \'' + scriptPath + '\' -version \'' + version + '\' }' :
            '& {& \'' + scriptPath + '\' -version \'' + version + '\' -NodePath "' + nodePath + '" }',
        psArgs = ['-NoProfile', '-NoLogo', specialArgs],
        child = spawn('powershell.exe', psArgs),
        stdout = [], stderr = [];

    child.stdout.on('data', function (data) {
        stdout.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        console.log('Error: ', data.toString());
        stderr.push(data.toString());
    });

    child.on('exit', function () {
        cb(stderr, stdout);
    });

    child.stdin.end();
}

/**
 * Checks for an active Internet connection by doing a DNS lookup of Microsoft.com
 * @param  {Function} cb - Callback
 * @return {boolean}     - True if lookup succeeded, false if it didn't
 */
function checkForInternet(cb) {
    require('dns').lookup('microsoft.com', function (err) {
        if (err && err.code === 'ENOTFOUND') {
            cb(false);
        } else {
            cb(true);
        }
    });
}

/**
 * Fetches the published versions of npm from the npm registry
 * @param  {Function} cb - Callback
 * @return {versions[]}  - Array of the available versions
 */
function getAvailableNPMVersions(cb) {
    exec('npm view npm versions --json', function (err, stdout) {
        if (err) {
            return console.error(chalk.red.bold('We could not show latest available versions. Try running this script again with the version you want to install (npm-windows-upgrade --version:3.0.0'));
        }

        cb(JSON.parse(stdout));
    });
}

/**
 * Gets the currently installed version of npm (npm -v)
 * @param  {Function} cb - Callback
 * @return {string}      - Installed version of npm
 */
function getNPMVersion(cb) {
    var nodeVersion;

    exec('npm -v', function (err, stdout) {
        if (err) {
            console.log(chalk.bold.red('Could not determine npm version.'));
            cb(null);
        } else {
            nodeVersion = stdout.replace(/\n/, '');
            cb(nodeVersion);
        }
    });
}

/**
 * Attempts to get the current installation location of npm by looking up the global prefix.
 * @param  {string} npmPath - Input path if given by user
 * @param  {Function} cb - Callback
 * @return {string}      - NodeJS installation path
 */
function getNodePath(npmPath, cb) {
    var nodePath, stats, error;

    if (npmPath) {
        try {
            stats = fs.lstatSync(npmPath);
            if (!stats.isDirectory()) {
                error = 'Given path ' + npmPath + ' is not a valid directory.\n';
                error += 'Please ensure that you added the correct path and try again!';
                console.error(chalk.bold.red(error));
                return cb(false);
            } else {
                return cb(npmPath);
            }
        }
        catch (e) {
            if (e) {
                error = 'Given path ' + npmPath + ' is not a valid directory.\n';
                error += 'Please ensure that you added the correct path and try again!';
                console.error(error);
                return cb(false);
            }
        }
        return;
    }

    function getFromConfig(_cb) {
        exec('npm config --global get prefix', function (err, stdout) {
            if (err) {
                console.log('Could not determine NodeJS location, will default to a Program Files directory.');
                _cb(null);
            } else {
                nodePath = stdout.replace(/\n/, '');
                _cb(nodePath);
            }
        });
    }

    function getFromCommand(_cb) {
        var spawnOptions = ['-NoProfile', '-NoLogo', 'Get-Command npm | Select-Object -ExpandProperty Definition'],
            child = spawn('powershell.exe', spawnOptions),
            stdout = [], stderr = [], cmdPath;

        child.stdout.on('data', function (data) {
            stdout.push(data.toString());
        });

        child.stderr.on('data', function (data) {
            stderr.push(data.toString());
        });

        child.on('exit', function () {
            if (stderr.length > 0) {
                return getFromConfig(_cb);
            }

            // Expecting npm.cmd path in stdout[0]
            cmdPath = stdout[0].trim();
            if (cmdPath && cmdPath.slice(cmdPath.length - 7) === 'npm.cmd') {
                // We're probably installed in a location like C:\Program Files\nodejs\npm.cmd,
                // meaning that we should not use the global prefix installation location
                nodePath = cmdPath.slice(0, cmdPath.length - 8);
                return _cb(nodePath);
            } else {
                // We're probably installed in %AppData%, but let's make sure
                return getFromConfig(_cb);
            }
        });

        child.stdin.end();
    }

    getFromCommand(cb);
}

/**
 * Checks the current Windows PS1 execution policy. The upgrader requires an unrestricted policy.
 * @param  {Function} cb - Callback
 * @return {[type]}      - True if unrestricted, false if it isn't
 */
function checkExecutionPolicy(cb) {
    var child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', 'Get-ExecutionPolicy']),
        output = [], unrestricted, i;

    child.stdout.on('data', function (data) {
        output.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        output.push(data.toString());
    });

    child.on('exit', function () {
        unrestricted = false;

        for (i = output.length - 1; i >= 0; i = i - 1) {
            if (output[i].indexOf('Unrestricted') > -1) {
                unrestricted = true;
                break;
            }
        }

        if (!unrestricted) {
            cb(false);
        } else {
            cb(true);
        }
    });

    child.stdin.end();
}

// Upgrade Method
/**
 * The actual upgrade method, utilizing all the helper methods above
 * @param  {string} version - Version that should be installed
 */
function upgradeNPM(version, npmPath) {
    var spinner = new Spinner('Upgrading.. %s'),
        info;

    spinner.start();

    getNodePath(npmPath, function (nodePath) {
        if (!nodePath) {
            return spinner.stop(false);
        }

        runPowershell(version, nodePath, function (stderr, stdout) {
            spinner.stop(false);
            console.log('\n');

            // If we failed to elevate to administrative rights, we have to abort.
            if (stdout[0] && stdout[0].indexOf('Please restart this script from an administrative PowerShell!') > -1) {
                info = 'NPM cannot be upgraded without administrative rights. To run PowerShell as Administrator,\n';
                info += "right-click PowerShell and select 'Run as Administrator'.";
                return console.log(chalk.bold.red(info));
            }

            // Confirm that the upgrade actually worked
            getNPMVersion(function (installedVersion) {
                if (installedVersion === version) {
                    info = 'Upgrade finished. Your new npm version is ' + installedVersion + '. Have a nice day!';
                    return console.log(chalk.bold.green(info));
                }

                // Uh-oh, something didn't work as it should have.
                info = 'You wanted to install npm ' + version + ', but the installed version is' + installedVersion + '.\n';
                info += 'Please consider reporting your trouble to http://aka.ms/npm-issues.';
                console.log(chalk.bold.red(info));
                console.log('Here is the output from the upgrader script:');
                return console.log(stdout, stderr);
            });
        });
    });
}

// Check OS
if (!isWin) {
    throw('This script upgrades npm on Windows, but the OS is not Windows.');
}

// Print version
console.log(chalk.yellow.bold('npm-windows-upgrade ' + package.version));

// Execute
checkExecutionPolicy(function (isUnrestricted) {
    if (!isUnrestricted) {
        console.log(chalk.bold.red('Scripts cannot be executed on this system.'));
        console.log('To fix this issue, please run the command below as Administrator and try again:');
        console.log('Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force');
        return;
    }

    checkForInternet(function (isOnline) {
        var version, npmPath, i;

        for (i = 1; i < args.length; i = i + 1) {
            version = (args[i].indexOf('--version:') > -1) ? args[i].slice(10) : version;
            npmPath = (args[i].indexOf('--npmPath:') > -1) ? args[i].slice(10) : npmPath;
        }

        if (!isOnline) {
            return console.err(chalk.bold.red('We have trouble connecting to the Internet. Aborting.'));
        }

        if (version) {
            upgradeNPM(version, npmPath);
        } else {
            getAvailableNPMVersions(function (versions) {
                var versionList = [{
                    type: 'list',
                    name: 'version',
                    message: 'Which version do you want to install?',
                    choices: versions.reverse()
                }];

                inquirer.prompt(versionList, function (answer) {
                    if (!answer.version) {
                        return console.err(chalk.bold.red('Could not determine version that should be installed. Aborting'));
                    }

                    upgradeNPM(answer.version, npmPath);
                });
            });
        }
    });
});
